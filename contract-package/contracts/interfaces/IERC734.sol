// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.17;

// Others
import { DataTypes } from "../libraries/DataTypes.sol";

/**
 * @title IERC734.
 * @author TESOBE GmbH. 
 *
 * @notice ERC734 (Key Holder) Interface.
 * Standard defined at https://github.com/ethereum/EIPs/issues/734.
 * @dev A Key is a complex representation of the properties/capabilities
 * from an address in the identity system.
 */
interface IERC734 {
    // ===== VIEW FUNCTIONS ======
    /**
     * @notice Returns the full key data, if present in the identity.
     * @dev The key for non-hex and long keys, its the Keccak256 hash of the key.
     *
     * @param _key The desired public key value.
     *
     * @return key The key data for the given public key.
     */
    function getKey (
        bytes32 _key
    ) external view returns (
        DataTypes.Key memory key
    );

    /**
     * @notice Returns the list of purposes associated with a key.
     *
     * @param _key The desired public key value.
     *
     * @return _purposes Returns the purposes of the specified key
     */
    function getKeyPurposes (
        bytes32 _key
    ) external view returns (
        uint256[] memory _purposes
    );

    /**
     * @notice Returns an array of public key bytes32 held by this identity.
     *
     * @param _purpose Purpose filter to get keys by.
     *
     * @return keys Array of public key hold by this identity.
     */
    function getKeysByPurpose (
        uint256 _purpose
    ) external view returns (
        bytes32[] memory keys
    );

    /**
     * @notice Verifiy wether a key has a given purpose or if it has
     * the MANAGEMENT purpose.
     *
     * @param _key The target key id.
     * @param _purpose The target purpose to validate.
     *
     * @return exists Returns true if the key exists and has the given purpose.
     */
    function keyHasPurpose (
        bytes32 _key,
        uint256 _purpose
    ) external view returns (
        bool exists
    );

    // ====== CORE LOGIC ======
    /**
     * @notice Adds a key to the identity.
     * 
     * The 'Purposes' are the following ones:
     * 1- MANAGEMENT keys, which can manage the identity.
     * 2- ACTION keys, which perform actions in this identities name (signing, logins, transactions, etc.)
     * 3- CLAIM signer keys, used to sign claims on other identities which need to be revokable.
     * 4- ENCRYPTION keys, used to encrypt data e.g. hold in claims.
     * @dev This call MUST only be done by keys of purpose 1, 
     * or the identity itself. If it's the identity itself, 
     * the approval process will determine its approval.
     *
     * @param _key Keccak256 representation of an ethereum address.
     * @param _purpose The key type as specified above.
     * @param _keyType Tpe of key used. e.g. 1 = ECDSA, 2 = RSA, etc.
     *
     * @return success Returns `True` if the addition was successful and `False` if not.
     */
    function addKey (
        bytes32 _key,
        uint256 _purpose,
        uint256 _keyType
    ) external returns (
        bool success
    );

    /**
     * @notice Removes the purpose of a specific _key from the identity.
     * @dev Must only be done by keys of purpose 1, or the identity itself.
     * If it's the identity itself, the approval process will determine its approval.
     *
     * @param _key Keccak256 representation of an ethereum address.
     * @param _purpose The purpose type to be removed from the key.
     *
     * @return success Returns `True` if the removal was successful and `False` if not.
     */
    function removeKey (
        bytes32 _key,
        uint256 _purpose
    ) external returns (
        bool success
    );

    /**
     * @notice Approves an execution or claim addition.
     * @dev If the sender is an ACTION key and the destination address
     * is not the identity contract itself, then the approval is
     * authorized and the operation would be performed.
     * If the destination address is the identity itself,
     * then the execution would be authorized and performed only
     * if the sender is a MANAGEMENT key.
     *
     * @param _id The exeuction `id`, generated by the `execute` function.
     * @param _approve Wheter to approve or reject the execution.
     *
     * @return success Returns `True` if the call was successful and `False` if not.
     */
    function approve (
        uint256 _id,
        bool _approve
    ) external returns (
        bool success
    );

    /**
     * @notice Passes an execution instruction to the keymanager.
     * @dev If the sender is an ACTION key and the destination address
     * is not the identity contract itself, then the execution is immediately
     * approved and performed.
     * If the destination address is the identity itself,
     * then the execution would be performed immediately only if
     * the sender is a MANAGEMENT key.
     * Otherwise the execution request must be approved via the `approve` method.
     *
     * @param _to The destination address to call.
     * @param _value The amount of ETH to transfer.
     * @param _data The data to forward.
     *
     * @return executionId SHOULD be sent to the approve function, to approve or reject this execution.
     */
    function execute (
        address _to,
        uint256 _value,
        bytes calldata _data
    ) external payable returns (
        uint256 executionId
    );
}
